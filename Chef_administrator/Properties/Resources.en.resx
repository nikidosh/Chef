<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="Add category" xml:space="preserve">
    <value>Add category</value>
  </data>
  <data name="Add dishes" xml:space="preserve">
    <value>Add dishes</value>
  </data>
  <data name="Add Ingredient" xml:space="preserve">
    <value>Add Ingredient</value>
  </data>
  <data name="Adding a category. On the left is a field for entering the name of the category. Bottom The category button returns you to the category form, the add button adds the category you entered if there is no such category already, the Menu button returns you to the menu form. At the bottom there is a table with already existing categories." xml:space="preserve">
    <value>Adding a category. On the left is a field for entering the name of the category. Bottom The category button returns you to the category form, the add button adds the category you entered if there is no such category already, the Menu button returns you to the menu form. At the bottom there is a table with already existing categories.</value>
  </data>
  <data name="Adding a dish" xml:space="preserve">
    <value>Adding a dish. In the name you enter the name of the dish you want to create, in the weight you enter the weight of the dish you are creating, you specify any price for the dishes, in quantity you specify how many dishes you want to create. Then you select the category that your dish belongs to, and from the three drop-down lists you select the ingredients that your dish will consist of. Next, you click add and it is added if there are ingredients, otherwise you will be given a message. Menu button you go to the menu form. On the right there is a table with ingredients to make it easier for you to choose the right ingredients.</value>
  </data>
  <data name="Adding an ingredient. In the name you enter the name of the ingredient you want to create, in the quantity you specify how many ingredients you want to create. Next, you click add and it is added if there are no such ingredients, otherwise you will be given a message. Menu button you go to the menu form. On the right there is a table with ingredients to make it easier for you to choose the right ingredients." xml:space="preserve">
    <value>Adding an ingredient. In the name you enter the name of the ingredient you want to create, in the quantity you specify how many ingredients you want to create. Next, you click add and it is added if there are no such ingredients, otherwise you will be given a message. Menu button you go to the menu form. On the right there is a table with ingredients to make it easier for you to choose the right ingredients.</value>
  </data>
  <data name="Authorization" xml:space="preserve">
    <value>Authorization</value>
  </data>
  <data name="Authorization. The user fills in the fields with valid data and presses the Login button. At the top left there is a choice of the language of Russian and English. When you click on Russian, the language will be Russian, if English then English. At the bottom left there is a Help button, well, I think you yourself understand what it is for since you have already come here." xml:space="preserve">
    <value>Authorization. The user fills in the fields with valid data and presses the Login button. At the top left there is a choice of the language of Russian and English. When you click on Russian, the language will be Russian, if English then English. At the bottom left there is a Help button, well, I think you yourself understand what it is for since you have already come here.</value>
  </data>
  <data name="Cabbage" xml:space="preserve">
    <value>Cabbage</value>
  </data>
  <data name="Categories. On the left you will see a table with all the created categories. Buttons on the right. The add button allows you to go to the add ingredient form, the delete button allows you to delete ingredients in the table, the Menu button allows you to go to the Menu form." xml:space="preserve">
    <value>Categories. On the left you will see a table with all the created categories. Buttons on the right. The add button allows you to go to the add ingredient form, the delete button allows you to delete ingredients in the table, the Menu button allows you to go to the Menu form.</value>
  </data>
  <data name="Category" xml:space="preserve">
    <value>Category</value>
  </data>
  <data name="Cheese" xml:space="preserve">
    <value>Cheese</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Dishes" xml:space="preserve">
    <value>Dishes</value>
  </data>
  <data name="Dishes_text" xml:space="preserve">
    <value>Dishes. On the left you will see a table with all created dishes. Buttons on the right. The Sort by Weight button allows you to sort dishes by weight, the Add button allows you to go to the add dish form, the Delete button allows you to delete dishes in the table, the Sort by Price button allows you to sort dishes by price, the Menu button allows you to go to the Menu form, The Export button allows you to export the table to Word. Just below you can enter the name of the dish and you will find such a dish if it is in the table</value>
  </data>
  <data name="Enter" xml:space="preserve">
    <value>Enter</value>
  </data>
  <data name="Enter the title" xml:space="preserve">
    <value>Enter the title</value>
  </data>
  <data name="Export" xml:space="preserve">
    <value>Export</value>
  </data>
  <data name="Ingredients" xml:space="preserve">
    <value>Ingredients</value>
  </data>
  <data name="Ingredients. On the left you will see a table with all created dishes. Buttons on the right. The add button allows you to go to the add ingredient form, the delete button allows you to delete ingredients in the table, the Menu button allows you to go to the Menu form. A little lower you can enter the name of the ingredient and you will find such an ingredient if it is in the table." xml:space="preserve">
    <value>Ingredients. On the left you will see a table with all created dishes. Buttons on the right. The add button allows you to go to the add ingredient form, the delete button allows you to delete ingredients in the table, the Menu button allows you to go to the Menu form. A little lower you can enter the name of the ingredient and you will find such an ingredient if it is in the table.</value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Menu" xml:space="preserve">
    <value>Menu</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="Perfect Menu. In the menu you can choose Dishes, Ingredients, Categories. When you click on the Dishes button, you will go to the dish form, if on the Ingredients button, then on the Ingredients form, if on the Category button, then on the Category form." xml:space="preserve">
    <value>Perfect Menu. In the menu you can choose Dishes, Ingredients, Categories. When you click on the Dishes button, you will go to the dish form, if on the Ingredients button, then on the Ingredients form, if on the Category button, then on the Category form.</value>
  </data>
  <data name="Potatoes" xml:space="preserve">
    <value>Potatoes</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="Search by name" xml:space="preserve">
    <value>Search by name</value>
  </data>
  <data name="Sort by price" xml:space="preserve">
    <value>Sort by price</value>
  </data>
  <data name="Sorted by weight" xml:space="preserve">
    <value>Sorted by weight</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Tomato" xml:space="preserve">
    <value>Tomato</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Weight" xml:space="preserve">
    <value>Weight</value>
  </data>
</root>